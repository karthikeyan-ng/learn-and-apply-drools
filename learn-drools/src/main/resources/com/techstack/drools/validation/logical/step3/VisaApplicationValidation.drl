package com.techstack.drools.validation.logical.step3

import com.techstack.drools.domain.InvalidPassport;
import com.techstack.drools.domain.InvalidVisaApplication;
import com.techstack.drools.domain.Passport;
import com.techstack.drools.domain.Validation;
import com.techstack.drools.domain.ValidVisaApplication;
import com.techstack.drools.domain.VisaApplication;

import java.time.LocalDate;

rule "Invalidate visa application with invalid passport"
  dialect "mvel"
  when
    $invalidPassport: InvalidPassport()
    $visaApplication: VisaApplication( $invalidPassport.passport.passportNumber == this.passportNumber)
    not ( InvalidVisaApplication( this.visaApplication == $visaApplication ) )
  then
    System.out.println( "Set " + $visaApplication + " invalid as " + $invalidPassport.getPassport() + " is invalid");
    insert( new InvalidVisaApplication($visaApplication) )
end

rule "Set application without validation info as passed"
  dialect "mvel"
  when
    $visaApplication: VisaApplication()
	  not ( InvalidVisaApplication( this.visaApplication == $visaApplication ) )
  then
	  System.out.println( $visaApplication + " is not known to be invalid, consider Valid" );
	  insertLogical( new ValidVisaApplication($visaApplication) )
end

rule "Invalidate visa application where passport expires earlier than 6 months after visit end date"
  dialect "mvel"
  when
	  $passport: Passport()
	  not( InvalidPassport( this.passport == $passport) )
	  $visaApplication: VisaApplication( passportNumber == $passport.passportNumber,
								  	                   $passport.expiresOn.isBefore(visitEndDate.plusMonths(6)) )
		not ( InvalidVisaApplication( this.visaApplication == $visaApplication ) )
  then
    System.out.println( "Set " + $visaApplication + " invalid as " + $passport + " is not valid 6 months after planned visit end date");
    insert( new InvalidVisaApplication($visaApplication) )
end
